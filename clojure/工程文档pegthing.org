* Interpretation


** Pegging

*** CREATE THE BOARD


| tri*               | 获取行尾元素集合                             |
| tri                | 行尾元素集合                                 |
| triangular?        | 元素 => 是否行尾                             |
| row-tri            | 行数 => 行尾                                 |
| row-num            | 元素 => 行数                                 |
| in-bounds?         | 输入元素是否超界                             |
| connect            | 判断超棋盘界否？据此建立连接                 |
| connect-right      | 计算右 nei 和 des，调用 connect              |
| connect-down-left  | 计算左下 nei 和 des，调用 connect            |
| connect-down-right | 计算右下 nei 和 des，调用 connect            |
| add-pos            | 给 board 的一个 pos 添加 :pegged 和 :connect |
| new-board          | 创建 board, 填充 :rows 字段 和 pos 字段      |

*** MOVE PEGS


| pegged?       | 检测 board 的 pos 是否 pegged         |
| valid-moves   | 从 :connect 中获取可跳转部分          |
| valid-move?   | board 的 pos 和 destination 是否可达  |
| remove-peg    | :pegged 置 false                      |
| place-peg     | :pegged 置 true                       |
| move-peg      | 移动两个 peg                          |
| make-move     | 判断 move 是否合理，移动三个 peg      |
| can-move?     | 查看 board 是否死态(valid-moves 不空) |
|               |                                       |


*** REPRESENT BOARD


| alpha-start   | "a" 的 unicode             |
| alpha-end     | "z" 的 unicode             |
| letters       | "a" ~ "z"                  |
| pos-chars     | 棋盘每个字母占用的位置个数 |
| ansi-styles   | 颜色字符串抬头集合         |
| ansi          | 添加颜色转译抬头 unicode   |
| colorize      | 生成带颜色字符串           |
| render-pos    | 打该位置字符串             |
| row-positions | 获取该行的所有 pos         |
| row-padding   | 生成棋盘每行前面空格字符串 |
| render-row    | 生成棋盘每行完整字符串     |
| print-board   | 打印整个棋盘               |
|               |                            |


*** INTERACTION


| letter->pos           | 字母(letter)转位置(pos)                     |
| get-input             | 获取用户输入，去掉周围空格                  |
| characters-as-strings | 从字符串中抓取所字母组 seq                  |
| prompt-move           | 用户输入起点终点，根据用户输入更改/打印棋盘 |
| successful-move       | 棋盘是否终态                                |
| game-over             | 程序结束后续操作，重玩 or 退出              |
| prompt-empty-peg      | 提示用户输入要移除的 peg,并行动             |
| prompt-rows           | 提示用户输入行数，并据此构建棋盘            |
|                       |                                             |


*** MAIN

| main | 调用 prompt-rows 进入游戏环节 |



** 编程感想

** 项目结构理解


*** 基本代码结构

1. 决定底层数据结构

2. 创建底层数据结构的 API

3. 跳跃 API

4. 棋盘展示 API

5. 用户交互 API


*** 交互图




                      +---------+           +-----------+
                      | UI      |           | Data      |
                      |         |           | Structure |
+---------+           |         |           |           |
|  user   |  <=====>  |         | <======>  |           |
+---------+           |         |           |           |
                      |         |           |           |
                      +---------+           +-----------+



*** 从表象到内在


    表象数据结构                         底层数据结构

      a0
     b0 c0                         1 2 3 4 5 6 7 8 9 10 ....
   d0 e0 f0
  g0 h0 i0 j0
k0 l0 m0 n0 o0




底层数据如何体现出表象数据


               1               1
             2   3             2
           4   5   6           3
         7   8   9   10        4
       11  12  13  14  15      5


               1-2-4
+----+---------+
|    |         |         1-3-6
+---------+--------------+
|    |    |    |         |
1    2    3    4    5    6    7    8    9    10 ...
^         ^              ^                   ^


"^" 标志了换行的位置

"-" 表示潜在的可跳转连接


*** 底层数据结构设计原则

1. 底层数据结构应该设计为：【元结构信息 + 转换 API = 底层数据结构 <----> 表象
   数据】，这样设计有效防止扩展性损失，以及过度专一化使得其他功能实现变复杂的问题

   用底层数据结构（右）表示表象数据结构（左），有两种方式：

   1. 直接体现在底层数据结构中:通过复杂的底层数据形式 -> 不方便扩展，容易使其他
      操作变复杂

      比如，为了体现出表象数据结构中【层】这个概念, 把底层结构信息设置为

      {:layer-1 [1] :layer-2 [2 3] ...}

      这样作会使得跳跃判断变的复杂

   2. 仅提供基本底层数据结构:更复杂数据形式通过 API 对基本底层数据进行转换获得
      -> 方便扩展

2. 底层数据结构的 API 要能获得表象数据结构的属性: 比如这个三角形有换行/结尾/层数
   等属性。
3. 底层数据结构的 API 要能实现表象数据结构的功能提供必要的辅助信息，比如跳跃




*** 示意图


        辅助 API
     +-------------> 其他属性验证信息，获取属性等
     |
     |
     |
     |
     |
     |
     |
     |
     |                                                      更改
     |                                    +------------------------------------------------+                                    
     |                                    |                                                |                                    
     |                                    |                             + --- peg 跳跃 ----+             +-->--+  <=====  用户 
     |             转换 API               v          功能 API           |                  |      选择   ^     |
  元数据结构   ====================>  底层数据结构  =================>  + --- peg 清除 ----+   <======   |     v
                                                                        |                                +---<-+
                                                                        + --- 终结判断 
                                                                        |
                                                                        + --- 是否可移动
                                                                        |
                                                                        + --- 所有可移动位置
                                                                        |
                                                                        + --- 打印 --- 表象数据结构

                                                                       
** TIPS

1. 一旦需要更改底层数据结构，肯定都属于[ 转换 API ]
2. 在编程转换 API 时，出现需要的功能而没有时，应该及时在辅助 API 中添加
3. 一般当 API 中必须使用底层数据结构（eg，board）时，这个 API 就是转换 API。
4. helper function 和 辅助 API 尽量保持更多的参数，这样方便综合性函数统和
5. 底层数据结构中尽量存储不变的信息，其他的随变信息通过方法作用在不变信息来获取。
   比如 底层数据结构 如果存储完整的连接信息，那么每次 peg 发生变化时，都要更新一
   遍 底层数据结构。因为 完整的连接信息是由 peg+candidate_connect 产生，而这两者
   是不变的。所以底层结构数据应该包含 peg 和 candidate_connect 两个信息。完整的
   连接信息通过定义一个函数来获取。
    




